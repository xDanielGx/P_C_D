# -*- coding: utf-8 -*-
"""Proyecto.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iMNcsHYFMvVNNTZ860esm57mpCfroueh

#Proyecto

##Definir Pregunta: *¿Cuáles son las tendencias espaciales y temporales de los incendios forestales en México?*

##Carga de librerias y datos
"""

#Importar la librerias
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
#Funcion para la carga de datos
def cargar_datos(ruta_archivo):
    """
    Carga los datos de incendios desde un archivo CSV.

    Parámetros:
    ruta_archivo (str): Ruta del archivo CSV.

    Returns:
    DataFrame: DataFrame con los datos de incendios.
    """
    #Cargar los datos
    fire_df = pd.read_csv('/content/drive/MyDrive/Colab_EDyA/incendios.csv', encoding='iso-8859-1', dtype=str)

    #Imprimir el tipo de objeto
    print("Tipo de objeto:", type(fire_df))
    print("----------------------------------------------------------------")

    #Mostrar información sobre el DataFrame
    print("\nDescibe los dimensiones de los datos de la data frame")
    print(fire_df.info())

    #Mostrar las primeras filas del DataFrame
    print("\nDescribe los 10 primeros datos de la data frame")
    print(fire_df.head(10))

    #Mostrar las últimas filas del DataFrame
    print("\nDescribe los 10 ultimos datos de la data frame")
    print(fire_df.tail(10))

    return fire_df
data_frame = 'incendios.csv'
fire_df = cargar_datos(data_frame)

"""##Limpieza y arreglos de datos"""

def limpiar_datos(df):
    """
    Realiza la limpieza de datos, convirtiendo las columnas necesarias a tipos numéricos, eliminando columnas irrelevantes, especificando el formato de fecha y hora,
    convirtiendo las columnas de latitud y longitud a tipo float, imputando valores faltantes utilizando la media y mostrando información básica y estadística del
    DataFrame después de la limpieza.

    Parámetros:
    df (DataFrame): DataFrame con los datos de incendios.

    Regresa:
    DataFrame: DataFrame limpio.
    """
    # Convertir columnas numéricas a tipo float
    Columnas_numericas = ['latitud_grados', 'latitud_minutos', 'latitud_segundos', 'longitud_grados',
                       'longitud_minutos', 'longitud_segundos', 'Duración días', 'Arbolado Adulto',
                       'Renuevo', 'Arbustivo', 'Herbáceo', 'Hojarasca', 'Total hectáreas']
    for col in Columnas_numericas:
        # Convertir la columna a tipo float, si no es posible, se asigna NaN
        df[col] = pd.to_numeric(df[col], errors='coerce')

    # Eliminar columnas irrelevantes para el análisis
    df = df.drop(['Clave del incendio', 'Clave Municipio', 'CVE_ENT', 'CVE_MUN', 'CVEGEO', 'Predio'], axis=1)

    # Convertir columnas numéricas a tipos de datos numéricos
    Columnas_numericas = ['Año', 'Duración días', 'Arbolado Adulto', 'Renuevo', 'Arbustivo', 'Herbáceo', 'Hojarasca', 'Total hectáreas']
    for col in Columnas_numericas:
        # Convertir la columna a tipo numérico, si no es posible, se asigna NaN
        df[col] = pd.to_numeric(df[col], errors='coerce')

    # Especificar el formato de fecha y hora para las columnas de fecha
    df['Fecha Inicio'] = pd.to_datetime(df['Fecha Inicio'], format='%d/%m/%Y', errors='coerce')
    df['Fecha Termino'] = pd.to_datetime(df['Fecha Termino'], format='%d/%m/%Y', errors='coerce')

    # Convertir columnas de latitud y longitud a tipo float
    df['Latitud'] = pd.to_numeric(df['Latitud'], errors='coerce')
    df['Longitud'] = pd.to_numeric(df['Longitud'], errors='coerce')

    # Imputar valores faltantes usando la media de cada columna
    for col in ['Duración días', 'Arbolado Adulto', 'Renuevo', 'Arbustivo', 'Herbáceo', 'Hojarasca']:
        # Llenar los valores faltantes de la columna con la media de esa columna
        df[col] = df[col].fillna(df[col].mean())

    # Mostrar información básica del DataFrame después de la conversión e imputación
    print("\nInformación después de la conversión e imputación de valores faltantes:")
    print(df.info())

    # Mostrar descripción estadística de las columnas numéricas
    print("\nDescripción estadística de las columnas numéricas:")
    print(df.describe())

    return df

# Llamar a la función limpiar_datos para limpiar el DataFrame
fire_df = limpiar_datos(fire_df)

"""##Graficas

###Grafica:  *Numeros de incendios por estados* (Grafica de Barra)
"""

def grafico_incendios_por_estado(fire_df):
    """
    Esta función genera un gráfico de barras que muestra el número de incendios
    por estado utilizando los datos proporcionados en el DataFrame fire_df.

    Parámetros:
    fire_df (DataFrame): DataFrame con los datos de incendios.
    """
    #Crear una nueva figura para el gráfico con el tamaño especificado
    plt.figure(figsize=(15, 8))

    #Crear un gráfico de barras contando el número de incendios por estado
    #sns.countplot es una función de seaborn que genera un gráfico de conteo de los valores de una columna categórica
    sns.countplot(data=fire_df, y='Estado', order=fire_df['Estado'].value_counts().index, hue='Estado', legend=False)

    #Agregar título al gráfico
    plt.title('Número de Incendios por Estado', fontsize=16)

    #Etiquetas de los ejes x e y
    plt.xlabel('Número de Incendios', fontsize=14)
    plt.ylabel('Estado', fontsize=14)

    #Tamaño de las etiquetas en los ejes x e y
    #fontsize especifica el tamaño de la fuente para los ejes x e y
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)

    #Agregar una descripción debajo del gráfico
    plt.text(0.5, -0.15, "Este gráfico muestra la distribución del número de incendios por estado.", ha='center', fontsize=12, transform=plt.gca().transAxes)

    #Mostrar el gráfico
    plt.show()

    #Cerrar la figura para liberar memoria
    plt.close()

"""###Grafica: *Cantidad de incendios a lo largo del tiempo, 2015-2023* (Grafica de lineas)"""

def grafico_lineas_incendios_por_año(df):
    """
    Esta función crea un gráfico de líneas que muestra la cantidad de incendios a lo largo del tiempo utilizando los datos proporcionados en el DataFrame.

    Parámetros:
    df (DataFrame): DataFrame con los datos de incendios.

    Regresa:
    Nada
    """
    #Crear una nueva figura para el gráfico con el tamaño especificado
    plt.figure(figsize=(15, 8))

    #Convertir la columna 'Año' a formato de fecha
    df['Año'] = pd.to_datetime(df['Año'], format='%Y')

    #Agrupar los datos por año y contar el número de incendios por año
    incendios_por_años = df.groupby('Año').size()

    #Crear un gráfico de líneas con los datos de incendios por año
    #kind='line' especifica que se debe generar un gráfico de líneas
    #marker='o' agrega puntos circulares en cada punto de datos en el gráfico de líneas
    #color='green' especifica el color de las líneas en el gráfico
    incendios_por_años.plot(kind='line', marker='o', color='green')

    #Agregar título al gráfico
    plt.title('Número de Incendios a lo Largo del Tiempo', fontsize=16)

    #Etiquetas de los ejes x e y
    plt.xlabel('Año', fontsize=14)
    plt.ylabel('Número de Incendios', fontsize=14)

    #Tamaño de las etiquetas en los ejes x e y
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)

    #Habilitar la cuadrícula en el gráfico
    plt.grid(True)

    #Agregar una descripción debajo del gráfico
    plt.text(0.5, -0.15, "Este gráfico muestra la cantidad de incendios a lo largo del tiempo en forma de serie temporal.", ha='center', fontsize=12, transform=plt.gca().transAxes)

    #Mostrar el gráfico sin bloquear la ejecución del código
    plt.show(block=False)

    #Cerrar la figura para liberar memoria
    plt.close()

"""###Grafica: *Cantidad de incendios por mes a lo largo del tiempo, 2015-2023* (Grafica de barra)"""

def grafico_barras_incendios_por_mes(df):
    """
    Crea un gráfico de barras que muestra la cantidad de incendios por mes a lo largo del tiempo.

    Parámetros:
    df (DataFrame): DataFrame con los datos de incendios.

    Regresa:
    Nada
    """
    #Extraer el mes de la columna 'Fecha Inicio' y crear una nueva columna 'Mes'
    df['Mes'] = df['Fecha Inicio'].dt.month

    #Contar el número de incendios por mes
    incendios_por_meses = df.groupby('Mes').size()

    #Mapear números de mes a nombres de mes
    meses = {
        1: 'Enero', 2: 'Febrero', 3: 'Marzo', 4: 'Abril', 5: 'Mayo', 6: 'Junio',
        7: 'Julio', 8: 'Agosto', 9: 'Septiembre', 10: 'Octubre', 11: 'Noviembre', 12: 'Diciembre'
    }

    #Obtener nombres de mes para cada número de mes
    nombres_meses = [meses[numero_mes] for numero_mes in incendios_por_meses.index]

    #Crear una nueva figura para el gráfico con el tamaño especificado
    plt.figure(figsize=(15, 8))

    #Crear un gráfico de barras con el número de incendios por mes
    incendios_por_meses.plot(kind='bar', color='skyblue')

    #Agregar título al gráfico
    plt.title('Número de Incendios por Mes', fontsize=16)

    #Etiquetas de los ejes x e y
    plt.xlabel('Mes', fontsize=14)
    plt.ylabel('Número de Incendios', fontsize=14)

    #Etiquetas personalizadas para el eje x con nombres de mes
    plt.xticks(range(len(incendios_por_meses)), nombres_meses, rotation=45, ha='right', fontsize=12)

    #Tamaño de las etiquetas en el eje y
    plt.yticks(fontsize=12)

    #Agregar una descripción debajo del gráfico
    plt.text(0.5, -0.3, "Este gráfico muestra la cantidad de incendios por mes a lo largo del tiempo.", ha='center', fontsize=12, transform=plt.gca().transAxes)

    #Mostrar el gráfico
    plt.show()

    #Cerrar la figura para liberar memoria
    plt.close()

"""###Grafica: *Distribución de los incendios por coordenadas* (Grafica de dispersión)"""

def grafico_dispersion_incendios_latitud_longitud(df):
    """
    Esta función crea un gráfico de dispersión que muestra la distribución geográfica de los incendios por latitud y longitud,
     con diferentes colores para distinguir los diferentes estados.

    Parámetros:
    df (DataFrame): DataFrame con los datos de incendios.

    Regresa:
    Nada
    """
    #Crear una nueva figura para el gráfico con el tamaño especificado
    plt.figure(figsize=(10, 10))

    #Crear un gráfico de dispersión que muestra la distribución geográfica de los incendios por latitud y longitud
    #sns.scatterplot es una función de seaborn que genera un gráfico de dispersión
    #hue: Este parámetro se utiliza para colorear los puntos en el gráfico según una variable categórica.
    #palette: Especifica la paleta de colores que se utilizará para colorear los puntos en el gráfico.
    #s: Este parámetro controla el tamaño de los puntos en el gráfico de dispersión.
    sns.scatterplot(data=df, x='Longitud', y='Latitud', hue='Estado', palette='tab10', s=10)

    #Agregar título al gráfico
    plt.title('Incendios por Latitud y Longitud', fontsize=16)

    #Etiquetas de los ejes x e y
    plt.xlabel('Longitud', fontsize=14)
    plt.ylabel('Latitud', fontsize=14)

    #Mostrar la leyenda para distinguir los diferentes estados
    #loc='upper right' especifica la ubicación de la leyenda en la esquina superior derecha del gráfico.
    plt.legend(loc='upper right', bbox_to_anchor=(1.25, 1), fontsize=12)

    #Tamaño de las etiquetas en los ejes x e y
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)

    #Agregar una descripción debajo del gráfico
    plt.text(0.3, -0.15, "Este gráfico muestra la distribución geográfica de los incendios por latitud y longitud, coloreados por estado.", ha='center', fontsize=12, transform=plt.gca().transAxes)

    #Mostrar el gráfico
    plt.show()

    #Cerrar la figura para liberar memoria
    plt.close()

"""###Grafica: *Concentración de incendios de su ubicación geografica* (Mapa de calor)"""

def mapa_calor_densidad_incendios(df):
    """
    Esta función crea un mapa de calor de densidad que muestra la concentración de incendios en función de su ubicación geográfica.

    Parámetros:
    df (DataFrame): DataFrame con los datos de incendios.

    Regresa:
    Nada
    """
    #Crear una nueva figura para el gráfico con el tamaño especificado
    plt.figure(figsize=(12, 8))

    #Crear un mapa de calor de densidad de incendios utilizando seaborn
    sns.kdeplot(x=df['Longitud'], y=df['Latitud'], cmap='Reds', fill=True)

    #Agregar título al gráfico
    plt.title('Mapa de Calor de Densidad de Incendios', fontsize=16)

    #Etiquetas de los ejes x e y
    plt.xlabel('Longitud', fontsize=14)
    plt.ylabel('Latitud', fontsize=14)

    #Tamaño de las etiquetas en los ejes x e y
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)

    #Agregar una descripción debajo del mapa de calor
    plt.text(0.5, -0.1, "Este mapa de calor de densidad muestra la concentración de incendios en función de su ubicación geográfica.", ha='center', fontsize=12, transform=plt.gca().transAxes)

    #Mostrar el mapa de calor
    plt.show()

    #Cerrar la figura para liberar memoria
    plt.close()

"""###Grafica: *Porcentaje de incendios por temporada* (Grafica de pastel)"""

def grafico_porcentaje_incendios_temporada(df):
    """
    Crea un gráfico de pastel que muestra el porcentaje de incendios por temporada.

    Parámetros:
    df (DataFrame): DataFrame con los datos de incendios.

    Retorna:
    Nada
    """
    #Mapear el mes de inicio de cada incendio a la temporada correspondiente
    df['Temporada'] = df['Fecha Inicio'].dt.month.map({1: 'Invierno', 2: 'Invierno', 3: 'Primavera', 4: 'Primavera',
                                                      5: 'Primavera', 6: 'Verano', 7: 'Verano', 8: 'Verano',
                                                      9: 'Otoño', 10: 'Otoño', 11: 'Otoño', 12: 'Invierno'})

    #Crear una nueva figura para el gráfico con el tamaño especificado
    plt.figure(figsize=(10, 8))

    #Destacar la primera porción (Invierno)
    explode = (0.1, 0, 0, 0)

    #Contar el número de incendios por temporada
    conteo_temporada = df['Temporada'].value_counts()

    #Crear un gráfico de pastel con el porcentaje de incendios por temporada
    conteo_temporada.plot(kind='pie', autopct='%1.1f%%', colors=sns.color_palette('pastel'), labels=None, explode=explode, shadow=True, startangle=140, textprops={'fontsize': 12})

    #Agregar título al gráfico
    plt.title('Porcentaje de Incendios por Temporada', fontsize=18, fontweight='bold')

    #Hacer que el gráfico de pastel sea circular
    plt.axis('equal')

    #Eliminar etiqueta del eje y
    plt.ylabel('')

    #Agregar leyenda y ajustar tamaño de fuente
    plt.legend(conteo_temporada.index, loc='upper left', bbox_to_anchor=(1, 1), fontsize=12)

    #Agregar una descripción debajo del gráfico
    plt.text(0.5, -0.1, "Este gráfico de pastel muestra el porcentaje de incendios por temporada.", ha='center', fontsize=12, transform=plt.gca().transAxes)

    #Mostrar el gráfico de pastel
    plt.show()

    #Cerrar la figura para liberar memoria
    plt.close()

"""###Grafica: *Proporcion de incendios por tipo de vegetación afectada* (Grafico de pastel)"""

def grafico_pastel_vegetacion_afectada(df):
    """
    Crea un gráfico de pastel que muestra la proporción de incendios por tipo de vegetación afectada.

    Parámetros:
    df (DataFrame): DataFrame con los datos de incendios.
    """
    #Sumar los valores de hectáreas afectadas por cada tipo de vegetación
    tipos_vegetacion = ['Arbolado Adulto', 'Renuevo', 'Arbustivo', 'Herbáceo', 'Hojarasca']
    suma_hectareas = df[tipos_vegetacion].sum()

    #Filtrar tipos de vegetación con al menos 1% del total de hectáreas afectadas
    suma_total = suma_hectareas.sum()
    suma_hectareas_filtradas = suma_hectareas[suma_hectareas / suma_total >= 0.01]

    #Crear etiquetas con porcentajes
    etiquetas = [f'{tipo} ({porcentaje:.2f}%)' for tipo, porcentaje in zip(suma_hectareas_filtradas.index, suma_hectareas_filtradas / suma_total * 100)]

    #Crear el gráfico de pastel
    plt.figure(figsize=(10, 8))
    explode = (0.1,) * len(suma_hectareas_filtradas)  # Destacar todas las porciones
    suma_hectareas_filtradas.plot(kind='pie', labels=None, autopct='%1.1f%%', startangle=140, explode=explode, shadow=True, colors=sns.color_palette('pastel'), textprops={'fontsize': 12})
    plt.title('Proporción de Incendios por Tipo de Vegetación Afectada', fontsize=18, fontweight='bold')
    plt.axis('equal')  #Hacer que el gráfico de pastel sea circular

    #Agregar leyenda y ajustar tamaño de fuente
    plt.legend(etiquetas, loc='upper left', bbox_to_anchor=(1, 1), fontsize=12)
    plt.text(0.5, -0.1, "Este gráfico muestra la proporción de hectáreas afectadas por tipo de vegetación.", ha='center', fontsize=12, transform=plt.gca().transAxes)
    plt.show()
    plt.close()

"""###Grafica: *Total de hectáreas quemadas por region* (Grafica de barra)"""

def grafico_comparacion_total_hectareas_regiones(df):
    """
    Crea un gráfico de barras que compara el total de hectáreas quemadas por región.

    Parámetros:
    df (DataFrame): DataFrame con los datos de incendios.

    Retorna:
    Nada
    """
    #Crear una nueva figura para el gráfico con el tamaño especificado
    plt.figure(figsize=(12, 8))

    #Calcular la mediana del total de hectáreas quemadas por región y ordenar los valores
    df.groupby('Región')['Total hectáreas'].median().sort_values().plot(kind='bar', color='skyblue')

    #Agregar título al gráfico
    plt.title('Comparación del Total de Hectáreas Quemadas por Región', fontsize=16)

    #Etiquetas de los ejes x e y
    plt.xlabel('Región', fontsize=14)
    plt.ylabel('Total de Hectáreas Quemadas', fontsize=14)

    #Rotar las etiquetas del eje x para mejor visualización
    plt.xticks(rotation=45, ha='right', fontsize=12)

    #Tamaño de las etiquetas en el eje y
    plt.yticks(fontsize=12)

    #Mostrar el gráfico de barras
    plt.show()

    #Cerrar la figura para liberar memoria
    plt.close()

"""###Grafica: *Caja de bigotes que muestra las hectareas quemadas*"""

def grafico_hectareas_por_estado(df):
    """
    Crea un gráfico de caja y bigotes que muestra la distribución del total de hectáreas quemadas por estado.

    Parámetros:
    df (DataFrame): DataFrame con los datos de incendios.
    """
    #Crear una nueva figura para el gráfico con el tamaño especificado
    plt.figure(figsize=(15, 8))

    #Crear el gráfico de caja y bigotes para la distribución del total de hectáreas quemadas por estado
    sns.boxplot(data=df, x='Total hectáreas', y='Estado')

    #Agregar título al gráfico
    plt.title('Total de Hectáreas Quemadas por Estado', fontsize=16)

    #Etiquetas de los ejes x e y
    plt.xlabel('Total de Hectáreas Quemadas', fontsize=14)
    plt.ylabel('Estado', fontsize=14)

    #Usar escala logarítmica en el eje x debido a la alta variabilidad en los datos
    plt.xscale('log')

    #Tamaño de las etiquetas en los ejes x e y
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)

    #Agregar una descripción debajo del gráfico
    plt.text(0.5, -0.15, "Este gráfico muestra la distribución del total de hectáreas quemadas por estado mediante un diagrama de caja y bigotes.", ha='center', fontsize=12, transform=plt.gca().transAxes)

    #Mostrar el gráfico de caja y bigotes
    plt.show()

    #Cerrar la figura para liberar memoria
    plt.close()

"""###Grafica: *Correlaciones entrre variables numéricas* (Mapa de calor de correlaciones)"""

def mapa_calor_correlaciones(df):
    """
    esta función proporciona una herramienta visual para explorar y comprender las relaciones entre variables numéricas en un DataFrame.

   Parámetros:
    df (DataFrame): DataFrame con las variables.

    Retorna:
    Nada
    """
    #Filtra solo las columnas numéricas para el cálculo de la correlación
    columnas_numericas = df.select_dtypes(include='number').columns  # Selecciona las columnas numéricas
    df_numeric = df[columnas_numericas]  # Crea un nuevo DataFrame con las columnas numéricas

    #Calcula la matriz de correlación
    correlaciones = df_numeric.corr()  # Calcula la matriz de correlación entre las variables numéricas

    #Crea el mapa de calor de las correlaciones
    plt.figure(figsize=(12, 8))  #Crea una nueva figura con el tamaño especificado
    sns.heatmap(correlaciones, annot=True, cmap='coolwarm', linewidths=0.5)  #Crea el mapa de calor
    plt.title('Mapa de Calor de Correlaciones entre Variables Numéricas', fontsize=16)  #Agrega título al gráfico
    plt.xticks(rotation=45, ha='right', fontsize=12)  #Ajusta las etiquetas del eje x
    plt.yticks(rotation=0, fontsize=12)  #Ajusta las etiquetas del eje y
    plt.show()  #Muestra el gráfico
    plt.close()  #Cierra la figura

"""##*Menu Interactivo*"""

def menu_interactivo(fire_df):
    """
    Función para mostrar el menú interactivo y permitir al usuario seleccionar gráficos.

    Parámetros:
    fire_df (DataFrame): DataFrame con los datos de incendios.
    """
    while True:
        # Mostrar el menú de opciones
        print("\nSeleccione el gráfico que desea visualizar:")
        print("1. Número de Incendios por Estado")
        print("2. Número de Incendios a lo Largo del Tiempo (por Año)")
        print("3. Número de Incendios por Mes")
        print("4. Distribución Geográfica de los Incendios")
        print("5. Mapa de calor Geográfica de los Incendios")
        print("6. Porcentaje de Incendios por Temporada")
        print("7. Porcentaje de Incendios por Tipo de Vegetación Afectada")
        print("8. Comparación del Total de Hectáreas Quemadas por Región")
        print("9. Gráfico de Caja y Bigotes que Muestra Hectáreas Quemadas por Estado")
        print("10. Mapa de Calor de Correlaciones entre Variables Numéricas")
        print("11. Salir")

        opcion = input("Ingrese el número de su elección: ")  # Solicitar al usuario que ingrese una opción

        # Validar la opción ingresada por el usuario y llamar a la función correspondiente
        if opcion == '1':
            #Gráfico de barras que muestra el número de incendios por estado
            grafico_incendios_por_estado(fire_df)
        elif opcion == '2':
            #Gráfico de líneas que muestra la cantidad de incendios a lo largo del tiempo
            grafico_lineas_incendios_por_año(fire_df)
        elif opcion == '3':
            #Gráfico de barras que muestra el número de incendios por mes
            grafico_barras_incendios_por_mes(fire_df)
        elif opcion == '4':
            #Gráfico de dispersión que muestra la distribución geográfica de los incendios
            grafico_dispersion_incendios_latitud_longitud(fire_df)
        elif opcion == '5':
            #Mapa de calor que muestra la concentración de incendios en función de su ubicación geográfica
            mapa_calor_densidad_incendios(fire_df)
        elif opcion == '6':
            #Gráfico de pastel que muestra el porcentaje de incendios por temporada
            grafico_porcentaje_incendios_temporada(fire_df)
        elif opcion == '7':
            #Gráfico de pastel que muestra la proporción de incendios por tipo de vegetación afectada
            grafico_pastel_vegetacion_afectada(fire_df)
        elif opcion == '8':
            #Gráfico de barras que compara el total de hectáreas quemadas por región
            grafico_comparacion_total_hectareas_regiones(fire_df)
        elif opcion == '9':
            #Gráfico de caja y bigotes que muestra la distribución del total de hectáreas quemadas por estado
            grafico_hectareas_por_estado(fire_df)
        elif opcion == '10':
            #Mapa de calor que muestra las correlaciones entre variables numéricas
            mapa_calor_correlaciones(fire_df)
        elif opcion == '11':
            print("Saliendo...")
            break  #Salir del bucle while si el usuario elige salir
        else:
            print("Opción no válida. Por favor, intente nuevamente.")  #Mensaje de error si el usuario ingresa una opción no válida

def main():
    """
    Función principal para ejecutar el análisis y las visualizaciones de manera interactiva.
    """
    menu_interactivo(fire_df)  #Llama a la función menu_interactivo para mostrar el menú interactivo al usuario

if __name__ == "__main__":
    main()  #Llama a la función main si el script se ejecuta como un programa independiente